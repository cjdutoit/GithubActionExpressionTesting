name: .Net
on:
  push:
    branches:
    - main
  pull_request:
    types:
    - opened
    - synchronize
    - reopened
    - closed
    branches:
    - main
env:
  IS_RELEASE_CANDIDATE: >-
    ${{
      (
        github.event_name == 'pull_request' && 
        startsWith(github.event.pull_request.title, 'RELEASES:') && 
        contains(github.event.pull_request.labels.*.name, 'RELEASES')
      )
      ||
      (
        github.event_name == 'push' && 
        startsWith(github.event.head_commit.message, 'RELEASES:') && 
        startsWith(github.ref_name, 'RELEASE')
      )
    }}
jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Configure Git
      run: >-
        git config user.name "GitHub Action"

        git config user.email "action@github.com"
    - name: Extract Version
      run: >
        $version_number=((Select-Xml -Path 'GithubActionExpressionTesting/GithubActionExpressionTesting.csproj' -XPath '//Version').Node.InnerXML)

        'version_number<<EOF' >> $env:GITHUB_ENV

        '$version_number' >> $env:GITHUB_ENV

        'EOF' >> $env:GITHUB_ENV
      shell: pwsh
    - name: Extract Package Release Notes
      run: >
        $package_release_notes=((Select-Xml -Path 'GithubActionExpressionTesting/GithubActionExpressionTesting.csproj' -XPath '//PackageReleaseNotes').Node.InnerXML)

        'package_release_notes<<EOF' >> $env:GITHUB_ENV

        '$package_release_notes' >> $env:GITHUB_ENV

        'EOF' >> $env:GITHUB_ENV
      shell: pwsh
    - name: Setup .Net
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Configure Git
      run: >-
        git config user.name "GitHub Action"

        git config user.email "action@github.com"
    - name: Extract Version
      run: >
        $version_number=((Select-Xml -Path 'GithubActionExpressionTesting/GithubActionExpressionTesting.csproj' -XPath '//Version').Node.InnerXML)

        'version_number<<EOF' >> $env:GITHUB_ENV

        '$version_number' >> $env:GITHUB_ENV

        'EOF' >> $env:GITHUB_ENV
      shell: pwsh
    - name: Extract Package Release Notes
      run: >
        $package_release_notes=((Select-Xml -Path 'GithubActionExpressionTesting/GithubActionExpressionTesting.csproj' -XPath '//PackageReleaseNotes').Node.InnerXML)

        'package_release_notes<<EOF' >> $env:GITHUB_ENV

        '$package_release_notes' >> $env:GITHUB_ENV

        'EOF' >> $env:GITHUB_ENV
      shell: pwsh
    - name: Setup .Net
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Setup .Net
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  add_tag:
    runs-on: ubuntu-latest
    needs:
    - build
    if: >-
      needs.build.result == 'success' && 

      github.event.pull_request.merged && 

      github.event.pull_request.base.ref == 'main' && 

      startsWith(github.event.pull_request.title, 'RELEASES:') && 

      contains(github.event.pull_request.labels.*.name, 'RELEASES')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_FOR_TAGGING }}
    - name: Configure Git
      run: >-
        git config user.name "GitHub Action"

        git config user.email "action@github.com"
    - name: Extract Version
      run: >
        $version_number=((Select-Xml -Path 'GithubActionExpressionTesting/GithubActionExpressionTesting.csproj' -XPath '//Version').Node.InnerXML)

        'version_number<<EOF' >> $env:GITHUB_ENV

        '$version_number' >> $env:GITHUB_ENV

        'EOF' >> $env:GITHUB_ENV
      shell: pwsh
    - name: Extract Package Release Notes
      run: >
        $package_release_notes=((Select-Xml -Path 'GithubActionExpressionTesting/GithubActionExpressionTesting.csproj' -XPath '//PackageReleaseNotes').Node.InnerXML)

        'package_release_notes<<EOF' >> $env:GITHUB_ENV

        '$package_release_notes' >> $env:GITHUB_ENV

        'EOF' >> $env:GITHUB_ENV
      shell: pwsh
    - name: Create GitHub Tag
      run: >-
        git tag -a "v${{ env.version_number }}" -m "Release - v${{ env.version_number }}"

        git push origin --tags
    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ env.version_number }}
        release_name: Release - v${{ env.version_number }}
        body: >-
          ## Release - v${{ env.version_number }}


          ### Release Notes

          ${{ env.package_release_notes }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_FOR_TAGGING }}
  publish:
    runs-on: ubuntu-latest
    needs:
    - add_tag
    if: needs.add_tag.result == 'success'
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Setup .Net
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Pack NuGet Package
      run: dotnet pack --configuration Release --include-symbols
    - name: Push NuGet Package
      run: dotnet nuget push **/bin/Release/**/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_ACCESS }} --skip-duplicate
